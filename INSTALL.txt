0. Introduction
   This file will show you how to build the RTL8198C/RTL8197F/RTL8196E linux system.
   Besides, It will guide you how to download the built image to Realtek EV (Evaluation) board 
   for testing. PLEASE NOTE, the download image will overwrite the original image existed in the 
   flash memory of EV board.

1. Build Environment
   Fedora 9
   Ubuntu 8.10/9.10

2. Quick start
   - tar -zxvf rtl819x.tar.gz
   - cd rtl819x/
   - make menuconfig:

	--for 96E+92E GW
		Selected Target (rtl8196e)
		Selected Kernel (linux-3.10)
		Selected Busybox (busybox-1.13)
		Selected toolchain (rsdk-4.6.4-4181-EB-3.10-u0.9.33-m32-150324)
		Selected Board Configuration (96E+92E GW)
		Select Load default settings

	--for 97F+8812BR GW
		Selected Target (rtl8197F)
		Selected Kernel (linux-3.10)
		Selected Busybox (busybox-1.13)
		Selected toolchain (msdk-4.4.7-mips-EL-3.10-u0.9.33-m32t-140827)
		Selected Board Configuration (RTL8197F/8812BR GW)
		Select Load default settings
		
	--for 97F+8812BR+8367 GW
		Selected Target (rtl8197F)
		Selected Kernel (linux-3.10)
		Selected Busybox (busybox-1.13)
		Selected toolchain (msdk-4.4.7-mips-EL-3.10-u0.9.33-m32t-140827)
		Selected Board Configuration (RTL8197F/8812BR+8367R GW)
		Select Load default settings

	--for 8198C+8814+8194 GW
		Selected Target (rtl8198C_8954E)
		Selected Kernel (linux-3.10)
		Selected Busybox (busybox-1.13)
		Selected toolchain (msdk-4.4.7-mips-EB-3.10-0.9.33-m32t-131227b)
		Selected Board Configuration (RTL8198C/8954E+8814+8194 GW)
		Select Load default settings

   - make
	
3. make image
   there are four steps for making image:
   - make users
     build the users applications
   - make linux
     build the kernel files
   - make romfs
     copy all the application binary files into romfs
   - make image
     compress the root.bin and linux.bin

4. build bootloader
   - ensure the source code of sdk is existent, do command "tar -zxvf rtl819x.tar.gz" first, it include the toolchain.
   - add environment variable(assume you source code directory is /rtl819x):
       --for rtl8197F
                 "export PATH=/rtl819x/toolchain/msdk-4.4.7-mips-EL-3.10-u0.9.33-m32t-140827/bin:$PATH"
   - cd bootcode_rtl8197F
   - make menuconfig:
       --for rtl8197f
			(RTL8197F) Product
			(SPI_FLASH) is FLASH Type
			[*] Config Spi Flash Number
			(1) FLASH_NUMBER
			[*] Support Flash Mapping Customize
			(10000) LINUX image flash offset start
			(80000) LINUX image flash offset end
			(1000) lINUX image check step
			(100000) ROOT image flash offset start
			(300000) ROOT image flash offset end
			(1000) ROOT image check step
			(10000) WEBPAGE image flash offset start                                                                       
            (40000) WEBPAGE image flash offset end                                                                        
			(1000) WEBPAGE image check step 
			(GZIP) compress    
			[*] Boot Code Debug Command Enable
			(NONE) External Switch/PHY support   

           you can do command "cp def-rtl8197f-config .config" before 'make menuconfig'
           and it will do the default setting for rtl8197F bootcode.
   - make 
   - you will find boot.bin in ./btcode
   - 'boot.bin' is the bootloader image

5. binary file list
   - bootcode_rtl8197f/btcode/boot.bin       : bootloader image
   - rtl819x/image/root.bin                  : rootfs binary image
   - rtl819x/image/linux.bin                 : linux-3.10 kernel image
   - rtl819x/image/webpages-gw.bin           : the webpages image
   - rtl819x/image/fw.bin                    : the image include root.bin,linux.bin and webpages-gw.bin
    	  
6. Download image files to Realtek EV (evaluation) board for testing
   - Use a RS232 cable to connect COM port between a LINUX PC and EV board.
   - Connect LINUX PC Ethernet port to the LAN port of EV board. Set PC IP
     address to 192.168.1.x (e.g., type 'ifconfig eth0 192.168.1.1').
   - Start a COM port console (e.g., minicom), and set COM port setting to
     38400, 8N1 and no flow control.
   - Power on EV board, and press 'ESC' key in COM port console to escape the
     booting process. If ok, you may see "<RealTek>" prompt in the console.
   - Start a TFTP client in LINUX PC, and connect to 192.168.1.6. Set file
     type to binary mode to TFTP server of EV board, put root.bin if gw 
     platform to TFTP server, and put root image file(rtl819x/image/root.bin) to TFTP server,
     then put the webpages image file and  linux image files to TFTP server.
     After linux.bin file upload had finished, boot code will auto booting.
   - NOTE:you can do the same thing on Windos PC.

7. Build ramdisk for MP using "root" user
   - modify /etc/fstab
     vim /etc/fstab
     add "/dev/ram /mnt/ramdisk ext2 suid,noauto,user,rw     0 0" in the file
   - cd /mnt
     mkdir ramdisk
   - cd /bin
     chmod +s mknod
   - cd /dev
     ln -sf ram1 ram

NOTE:
   - In order to create dev file in romfs, /bin/mknod should be suid.
     Do the command "chmod +s /bin/mknod" as root privilege.
   - If you don't use the default setting to make bootcode, make sure the size of boot.bin is less than 24K.

2017/10/23


============Added by Denny   2018.11.16

== Configuration

To configure the toolchain for the AIP-W512 board, use this command in top directory:
> $ make menuconfig

	> Selected Target : rtl8196e
	> Selected Kernel : linux-2.6.30
	> Selected Busybox : busybox-1.13
	> Selected toolchain : rsdk-1.3.6-4181-EB-2.6.30-0.9.30
	> Selected board configuration : 96E+88E GW
	> Config users : yes

Then exit and save this new configuration.
The next configuration screen allows you to choose built-in applications.
(Only ettercap, dropbear and tcpdump have been tested at this time.)
Again, exit and save this new configuration.

** Known issue **
If you get the error "Error :  error opening terminal xterm", create this symbolic link:
> # ln -s /lib/terminfo/x/xterm /usr/share/terminfo/x/xterm

== Build

> $ make

Generated firmware image (rootfs+kernel)
$top/image/fw.bin

** Known issue **
If you get the error:
libtool eval: 1: libtool_args+=: not found
libtool eval: 1: compile_command+=: not found
...

you have to link /bin/sh file to /bin/bash :
> # unlink /bin/sh
> # ln -s /bin/bash /bin/sh
> $ export SHELL=/bin/bash

== Filesystem customization

To customize /etc/ directory, you can edit files in $top/target/etc.default/.

Otherwise, you can edit 'romfs' target in $top/target/Makefile to add files.
e.g. to add a root directory: $(ROMFSINST) root /root

You must rebuild to apply changes:

> $ make

== Flash

A successful build generates few images:
$top/image/linux.bin (kernel)
$top/image/root.bin (rootfs)
$top/image/webpages.bin (web pages)
$top/image/fw.bin (kernel+rootfs+web pages)

You have to flash fw.bin (never tried others) by following one of these methods:

 * TFTP (bootloader):
	- Connect LAN ethernet port of the device to your network
	- Find out serial port
		UART Pinout
		->1 VCC (with arrow on PCB)
		  2 TX
		  3 RX
		  4 GND
	- Connect UART port with settings: 38400 8N1
		> # screen /dev/ttyUSB0 38400 8N1
	- Press 'Esc' key at boot to interrupt
	- Here a shell. Enter '?' to get help message
	- Enter 'IPCONFIG' command to display device's IP address, and modify if needed
	- Upload image by TFTP
		> $ atftp -p -l $top/image/fw.bin 192.168.1.6

 * Web interface (tcp/80): In the menu >Management>Upgrade firmware

Network configuration won't be altered.
Default root password is 'root'.
